openapi: 3.0.3
info:
  title: MuseBar API
  description: |
    Point of Sale & Bar Management System API
    
    ## Features
    - Complete transaction management
    - Legal compliance (French regulations)
    - Inventory management
    - User management with role-based access
    - Audit trail and legal journal
    - Happy hour management
    - Daily closure with legal compliance
    
    ## Authentication
    All endpoints require JWT authentication except `/api/auth/login`
    
    ## Legal Compliance
    This API maintains full compliance with French regulations (Article 286-I-3 bis du CGI)
  version: 1.0.0
  contact:
    name: MuseBar Support
    email: support@musebar.com
  license:
    name: Proprietary
    url: https://musebar.com/license

servers:
  - url: http://localhost:3001/api/v1
    description: Development server
  - url: https://api.musebar.com/api/v1
    description: Production server

security:
  - BearerAuth: []

paths:
  /auth/login:
    post:
      tags:
        - Authentication
      summary: User login
      description: Authenticate user and return JWT token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  description: User email address
                  example: "admin@musebar.com"
                password:
                  type: string
                  format: password
                  description: User password
                  example: "securepassword123"
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  token:
                    type: string
                    description: JWT token for authentication
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                  user:
                    $ref: '#/components/schemas/User'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/users:
    get:
      tags:
        - User Management
      summary: Get all users
      description: Retrieve list of all users (admin only)
      security:
        - BearerAuth: []
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden - Admin access required

  /orders:
    get:
      tags:
        - Orders
      summary: Get all orders
      description: Retrieve list of all orders with optional filtering
      security:
        - BearerAuth: []
      parameters:
        - name: status
          in: query
          description: Filter by order status
          schema:
            type: string
            enum: [pending, completed, cancelled]
        - name: start_date
          in: query
          description: Filter by start date (ISO format)
          schema:
            type: string
            format: date
        - name: end_date
          in: query
          description: Filter by end date (ISO format)
          schema:
            type: string
            format: date
        - name: limit
          in: query
          description: Number of orders to return
          schema:
            type: integer
            default: 50
            minimum: 1
            maximum: 100
        - name: offset
          in: query
          description: Number of orders to skip
          schema:
            type: integer
            default: 0
            minimum: 0
      responses:
        '200':
          description: List of orders
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Order'
                  total:
                    type: integer
                    description: Total number of orders
                    example: 150
        '401':
          description: Unauthorized
        '500':
          description: Server error

    post:
      tags:
        - Orders
      summary: Create new order
      description: Create a new order with items and payment information
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrderRequest'
      responses:
        '201':
          description: Order created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/Order'
                  message:
                    type: string
                    example: "Commande créée avec succès"
        '400':
          description: Bad request - validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '401':
          description: Unauthorized
        '500':
          description: Server error

  /orders/{id}:
    get:
      tags:
        - Orders
      summary: Get order by ID
      description: Retrieve a specific order by its ID
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Order ID
          schema:
            type: string
      responses:
        '200':
          description: Order details
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/Order'
        '404':
          description: Order not found
        '401':
          description: Unauthorized
        '500':
          description: Server error

  /orders/{id}/status:
    patch:
      tags:
        - Orders
      summary: Update order status
      description: Update the status of an existing order
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Order ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - status
              properties:
                status:
                  type: string
                  enum: [pending, completed, cancelled]
                  description: New order status
      responses:
        '200':
          description: Order status updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/Order'
                  message:
                    type: string
                    example: "Statut de la commande mis à jour"
        '400':
          description: Bad request - invalid status
        '404':
          description: Order not found
        '401':
          description: Unauthorized
        '500':
          description: Server error

  /categories:
    get:
      tags:
        - Categories
      summary: Get all categories
      description: Retrieve list of all product categories
      security:
        - BearerAuth: []
      responses:
        '200':
          description: List of categories
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
        '401':
          description: Unauthorized
        '500':
          description: Server error

    post:
      tags:
        - Categories
      summary: Create new category
      description: Create a new product category
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCategoryRequest'
      responses:
        '201':
          description: Category created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/Category'
        '400':
          description: Bad request - validation error
        '401':
          description: Unauthorized
        '500':
          description: Server error

  /categories/{id}:
    put:
      tags:
        - Categories
      summary: Update category
      description: Update an existing category
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Category ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCategoryRequest'
      responses:
        '200':
          description: Category updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/Category'
        '400':
          description: Bad request - validation error
        '404':
          description: Category not found
        '401':
          description: Unauthorized
        '500':
          description: Server error

    delete:
      tags:
        - Categories
      summary: Delete category
      description: Delete a category (soft delete)
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Category ID
          schema:
            type: string
      responses:
        '200':
          description: Category deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Catégorie supprimée avec succès"
        '404':
          description: Category not found
        '401':
          description: Unauthorized
        '500':
          description: Server error

  /products:
    get:
      tags:
        - Products
      summary: Get all products
      description: Retrieve list of all products with optional filtering
      security:
        - BearerAuth: []
      parameters:
        - name: category_id
          in: query
          description: Filter by category ID
          schema:
            type: string
        - name: is_active
          in: query
          description: Filter by active status
          schema:
            type: boolean
        - name: is_happy_hour_eligible
          in: query
          description: Filter by happy hour eligibility
          schema:
            type: boolean
      responses:
        '200':
          description: List of products
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
        '401':
          description: Unauthorized
        '500':
          description: Server error

    post:
      tags:
        - Products
      summary: Create new product
      description: Create a new product
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProductRequest'
      responses:
        '201':
          description: Product created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/Product'
        '400':
          description: Bad request - validation error
        '401':
          description: Unauthorized
        '500':
          description: Server error

  /products/{id}:
    put:
      tags:
        - Products
      summary: Update product
      description: Update an existing product
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Product ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProductRequest'
      responses:
        '200':
          description: Product updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/Product'
        '400':
          description: Bad request - validation error
        '404':
          description: Product not found
        '401':
          description: Unauthorized
        '500':
          description: Server error

    delete:
      tags:
        - Products
      summary: Delete product
      description: Delete a product (soft delete)
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Product ID
          schema:
            type: string
      responses:
        '200':
          description: Product deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Produit supprimé avec succès"
        '404':
          description: Product not found
        '401':
          description: Unauthorized
        '500':
          description: Server error

  /legal/compliance:
    get:
      tags:
        - Legal Compliance
      summary: Get compliance status
      description: Retrieve legal compliance status and integrity checks
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Compliance status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ComplianceStatus'
        '401':
          description: Unauthorized
        '500':
          description: Server error

  /legal/journal:
    get:
      tags:
        - Legal Compliance
      summary: Get legal journal entries
      description: Retrieve legal journal entries for compliance verification
      security:
        - BearerAuth: []
      parameters:
        - name: limit
          in: query
          description: Number of entries to return
          schema:
            type: integer
            default: 50
            minimum: 1
            maximum: 100
        - name: offset
          in: query
          description: Number of entries to skip
          schema:
            type: integer
            default: 0
            minimum: 0
      responses:
        '200':
          description: Legal journal entries
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/LegalJournalEntry'
                  total:
                    type: integer
                    description: Total number of entries
                    example: 130
        '401':
          description: Unauthorized
        '500':
          description: Server error

  /closures:
    get:
      tags:
        - Closures
      summary: Get closure bulletins
      description: Retrieve daily closure bulletins
      security:
        - BearerAuth: []
      responses:
        '200':
          description: List of closure bulletins
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ClosureBulletin'
        '401':
          description: Unauthorized
        '500':
          description: Server error

    post:
      tags:
        - Closures
      summary: Create closure bulletin
      description: Create a new daily closure bulletin
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateClosureRequest'
      responses:
        '201':
          description: Closure bulletin created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/ClosureBulletin'
        '400':
          description: Bad request - validation error
        '401':
          description: Unauthorized
        '500':
          description: Server error

  /health:
    get:
      tags:
        - System
      summary: Health check
      description: Check system health and database connectivity
      responses:
        '200':
          description: System is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "healthy"
                  timestamp:
                    type: string
                    format: date-time
                    example: "2025-01-27T10:30:00Z"
                  database:
                    type: string
                    example: "connected"
                  version:
                    type: string
                    example: "1.0.0"
        '503':
          description: System is unhealthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "unhealthy"
                  errors:
                    type: array
                    items:
                      type: string
                    example: ["Database connection failed"]

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          example: "1"
        email:
          type: string
          format: email
          example: "admin@musebar.com"
        is_admin:
          type: boolean
          example: true
        permissions:
          type: array
          items:
            type: string
          example: ["access_pos", "access_menu", "access_history"]
        created_at:
          type: string
          format: date-time
          example: "2025-01-27T10:30:00Z"
        updated_at:
          type: string
          format: date-time
          example: "2025-01-27T10:30:00Z"

    Category:
      type: object
      properties:
        id:
          type: string
          example: "1"
        name:
          type: string
          example: "Bières"
        description:
          type: string
          example: "Toutes les bières disponibles"
        color:
          type: string
          example: "#1976d2"
        is_active:
          type: boolean
          example: true
        created_at:
          type: string
          format: date-time
          example: "2025-01-27T10:30:00Z"
        updated_at:
          type: string
          format: date-time
          example: "2025-01-27T10:30:00Z"

    Product:
      type: object
      properties:
        id:
          type: string
          example: "1"
        name:
          type: string
          example: "Heineken"
        description:
          type: string
          example: "Bière blonde 25cl"
        price:
          type: number
          format: float
          example: 6.50
        tax_rate:
          type: number
          format: float
          example: 0.20
        category_id:
          type: string
          example: "1"
        is_happy_hour_eligible:
          type: boolean
          example: true
        happy_hour_discount_type:
          type: string
          enum: [percentage, fixed]
          example: "percentage"
        happy_hour_discount_value:
          type: number
          format: float
          example: 0.20
        is_active:
          type: boolean
          example: true
        created_at:
          type: string
          format: date-time
          example: "2025-01-27T10:30:00Z"
        updated_at:
          type: string
          format: date-time
          example: "2025-01-27T10:30:00Z"

    Order:
      type: object
      properties:
        id:
          type: string
          example: "ORD-2025-001"
        items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItem'
        total_amount:
          type: number
          format: float
          example: 25.00
        tax_amount:
          type: number
          format: float
          example: 5.00
        discount_amount:
          type: number
          format: float
          example: 0.00
        final_amount:
          type: number
          format: float
          example: 25.00
        status:
          type: string
          enum: [pending, completed, cancelled]
          example: "completed"
        payment_method:
          type: string
          enum: [cash, card, split]
          example: "card"
        notes:
          type: string
          example: "Table 5"
        tips:
          type: number
          format: float
          example: 2.00
        change:
          type: number
          format: float
          example: 0.00
        created_at:
          type: string
          format: date-time
          example: "2025-01-27T10:30:00Z"
        updated_at:
          type: string
          format: date-time
          example: "2025-01-27T10:30:00Z"

    OrderItem:
      type: object
      properties:
        id:
          type: string
          example: "1"
        product_id:
          type: string
          nullable: true
          example: "1"
        product_name:
          type: string
          example: "Heineken"
        quantity:
          type: integer
          example: 2
        unit_price:
          type: number
          format: float
          example: 6.50
        total_price:
          type: number
          format: float
          example: 13.00
        tax_rate:
          type: number
          format: float
          example: 0.20
        tax_amount:
          type: number
          format: float
          example: 2.60
        is_happy_hour_applied:
          type: boolean
          example: false
        is_manual_happy_hour:
          type: boolean
          example: false
        is_offert:
          type: boolean
          example: false
        is_perso:
          type: boolean
          example: false
        original_price:
          type: number
          format: float
          example: 6.50
        description:
          type: string
          example: "Bière blonde 25cl"

    CreateOrderRequest:
      type: object
      required:
        - items
        - payment_method
      properties:
        items:
          type: array
          items:
            type: object
            required:
              - product_id
              - quantity
            properties:
              product_id:
                type: string
                example: "1"
              quantity:
                type: integer
                minimum: 1
                example: 2
              unit_price:
                type: number
                format: float
                example: 6.50
        payment_method:
          type: string
          enum: [cash, card, split]
          example: "card"
        notes:
          type: string
          example: "Table 5"
        tips:
          type: number
          format: float
          example: 2.00
        change:
          type: number
          format: float
          example: 0.00

    CreateCategoryRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          example: "Bières"
        description:
          type: string
          example: "Toutes les bières disponibles"
        color:
          type: string
          example: "#1976d2"

    UpdateCategoryRequest:
      type: object
      properties:
        name:
          type: string
          example: "Bières"
        description:
          type: string
          example: "Toutes les bières disponibles"
        color:
          type: string
          example: "#1976d2"
        is_active:
          type: boolean
          example: true

    CreateProductRequest:
      type: object
      required:
        - name
        - price
        - category_id
      properties:
        name:
          type: string
          example: "Heineken"
        description:
          type: string
          example: "Bière blonde 25cl"
        price:
          type: number
          format: float
          minimum: 0
          example: 6.50
        tax_rate:
          type: number
          format: float
          example: 0.20
        category_id:
          type: string
          example: "1"
        is_happy_hour_eligible:
          type: boolean
          example: true
        happy_hour_discount_type:
          type: string
          enum: [percentage, fixed]
          example: "percentage"
        happy_hour_discount_value:
          type: number
          format: float
          example: 0.20

    UpdateProductRequest:
      type: object
      properties:
        name:
          type: string
          example: "Heineken"
        description:
          type: string
          example: "Bière blonde 25cl"
        price:
          type: number
          format: float
          minimum: 0
          example: 6.50
        tax_rate:
          type: number
          format: float
          example: 0.20
        category_id:
          type: string
          example: "1"
        is_happy_hour_eligible:
          type: boolean
          example: true
        happy_hour_discount_type:
          type: string
          enum: [percentage, fixed]
          example: "percentage"
        happy_hour_discount_value:
          type: number
          format: float
          example: 0.20
        is_active:
          type: boolean
          example: true

    ComplianceStatus:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: object
          properties:
            compliance_status:
              type: object
              properties:
                is_compliant:
                  type: boolean
                  example: true
                integrity_errors:
                  type: array
                  items:
                    type: string
                  example: []
                journal_entries_count:
                  type: integer
                  example: 130
                last_verification:
                  type: string
                  format: date-time
                  example: "2025-01-27T10:30:00Z"

    LegalJournalEntry:
      type: object
      properties:
        id:
          type: string
          example: "1"
        entry_type:
          type: string
          enum: [order_created, order_updated, order_cancelled, closure_created]
          example: "order_created"
        order_id:
          type: string
          example: "ORD-2025-001"
        amount:
          type: number
          format: float
          example: 25.00
        hash:
          type: string
          example: "a1b2c3d4e5f6..."
        previous_hash:
          type: string
          example: "f6e5d4c3b2a1..."
        created_at:
          type: string
          format: date-time
          example: "2025-01-27T10:30:00Z"

    ClosureBulletin:
      type: object
      properties:
        id:
          type: string
          example: "1"
        closure_date:
          type: string
          format: date
          example: "2025-01-27"
        total_sales:
          type: number
          format: float
          example: 1250.50
        total_tax:
          type: number
          format: float
          example: 250.10
        cash_total:
          type: number
          format: float
          example: 450.30
        card_total:
          type: number
          format: float
          example: 800.20
        tips_total:
          type: number
          format: float
          example: 45.00
        orders_count:
          type: integer
          example: 25
        created_at:
          type: string
          format: date-time
          example: "2025-01-27T23:59:59Z"

    CreateClosureRequest:
      type: object
      required:
        - closure_date
      properties:
        closure_date:
          type: string
          format: date
          example: "2025-01-27"

    Error:
      type: object
      properties:
        success:
          type: boolean
          example: false
        error:
          type: string
          example: "Une erreur s'est produite"
        message:
          type: string
          example: "Détails de l'erreur"
        status_code:
          type: integer
          example: 500

    ValidationError:
      type: object
      properties:
        success:
          type: boolean
          example: false
        error:
          type: string
          example: "Erreurs de validation"
        validation_errors:
          type: array
          items:
            type: object
            properties:
              field:
                type: string
                example: "name"
              message:
                type: string
                example: "Le nom est requis"
        status_code:
          type: integer
          example: 400

tags:
  - name: Authentication
    description: User authentication and authorization
  - name: Orders
    description: Order management operations
  - name: Categories
    description: Product category management
  - name: Products
    description: Product management operations
  - name: User Management
    description: User management operations (admin only)
  - name: Legal Compliance
    description: Legal compliance and audit trail operations
  - name: Closures
    description: Daily closure bulletin operations
  - name: System
    description: System health and status endpoints 